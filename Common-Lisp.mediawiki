[http://en.wikipedia.org/wiki/Common_Lisp Common Lisp] (also known as CL, or just Lisp in most cases) has a sizable community and great library support for things like SDL, OpenGL, TrueType fonts, asset handling, etc, so it makes a good option for Lisp game development. Some resources for learning can be found on [[Learning Common Lisp]] page.
https://git.axity.net/axion/net.axity.common-lisp.gamedev/src/master/math
Being a standardized language, it has several implementations. Popular choices for open source CL implementation are [http://sbcl.org/ SBCL] and [http://ccl.clozure.com/ Clozure Common Lisp], but there are [https://en.wikipedia.org/wiki/Category:Common_Lisp_implementations many more implementations] with their own perks and quirks.

= Window management and Input Handling =
* [[glop]] provides simple OpenGL window and context manipulation code as well as system input handling.
* [https://github.com/lispgames/sdl2kit sdl2kit] is a utility kit for cl-sdl2 that provides something similar to GLUT, however, it's also geared at being useful for "real" applications or games.
* [https://github.com/lispgames/cl-sdl2 cl-sdl2] is a Common Lisp wrapper for the SDL 2.0 C Library.
* [https://github.com/AlexCharlton/cl-glfw3 cl-glfw3] provides bindings for the GLFW 3.x library for Common Lisp.
* [http://www.cliki.net/CLX CLX] provides an implementation of the X Window System protocol to Lisp graphics library[ies] and applications.
* [[Lispbuilder-SDL]] provides a set of bindings and Lispy abstractions for graphics, sound, input and other features. [''DEPRECATED'']
* [[cl-glfw]] is an open source, multi-platform library for opening a window, creating an OpenGL context and managing input. [''DEPRECATED'']

= Graphics =

== APIs ==
* [[cl-opengl]] If you're writing games in Common Lisp, you are almost certainly going to be using OpenGL. This wrapper enables Common Lisp to access almost every feature of OpenGL.
* [https://github.com/lispgames/glkit glkit] is a utility kit for functionality related to OpenGL.
* [[PAL]] (Pixel Art Library) is a portable Common Lisp graphics and sound library for 2D games. [''UNMAINTAINED'']
* [https://github.com/Lovesan/LDX LDX] is an attempt to bring DirectX into Common Lisp. [''STALLED'']

== Rendering Engines ==
* [https://github.com/BradWBeer/CLinch CLinch] is a shader-based graphics engine using [[cl-opengl]]. It has strong vector graphics support. It also has [https://github.com/BradWBeer/CLinch/wiki/CLinch-Tutorials tutorials].
* [https://github.com/cbaggers/cepl CEPL] is a lispy and REPL-friendly Common Lisp library for working with OpenGL.
* [http://github.com/anwyn/cl-horde3d cl-horde3d] is a wrapper around the open source graphics engne [http://horde3d.org/home.html Horde3d].
* [[okra]] is a wrapper around the open source graphics engine [http://ogre3d.org OGRE]. [''STALLED'']

== 2D Graphics ==
* [http://cliki.net/cl-cairo2 cl-cairo2] is a graphics library that provides Common Lisp bindings for the [http://cairographics.org/ Cairo API].

= Assets Handling =
* [https://github.com/3b/classimp classimp] provides Common Lisp bindings for [http://assimp.sourceforge.net/ Open Asset Import Library].

= Image processing =
* [[imago]] is an image manipulation library for Common Lisp.
* [https://github.com/slyrus/opticl opticl] is designed to be a high-performance but relatively lightweight library for representing, processing, loading, and saving 2-dimensional pixel-based images.
* [https://github.com/lispgames/cl-sdl2-image cl-sdl2-image] is a (currently) brief but usable wrapper for SDL2_image.
* [[cl-devil]] provides bindings to the DevIL image loading and manipulation library.
* [http://github.com/cbaggers/cl-soil cl-soil] is a work-in-progress wrapper around the [http://www.lonesock.net/soil.html SOIL] library.

= Audio = 
* [[cl-openal]] provides CL bindings for OpenAL API.
* [https://github.com/lispgames/cl-sdl2-mixer cl-sdl2-mixer] is a brief but usuable wrapper for SDL2_Mixer.
* [http://thirdcog.eu/apps/cfxr cfxr]

= Physics =
* [[cl-ode]] - bindings for [http://www.ode.org/ Open Dynamics Engine] library. (3D/2D)
* [[SquirL]] is native Lisp port of the [https://chipmunk-physics.net/ Chipmunk physics] library. (2D)
* [https://github.com/aerique/buclet buclet] - bindings for [http://bulletphysics.org/ Bullet Physics] library (3D) [''STALLED'']

= Math =
* [https://github.com/cbaggers/rtg-math rtg-math] provides a selection of the math routines most commonly needed for making realtime graphics in lisp.
* [https://github.com/lispgames/mathkit mathkit] is a purely math-related utility kit, providing functions which can be useful for games, 3D, and GL in general.
* [https://github.com/nikodemus/sb-cga sb-cga] is a highly optimized (incl. SSE) computer graphics algebra library for Common Lisp.
* [https://git.axity.net/axion/net.axity.common-lisp.gamedev/src/master/math ax.math] is an efficient computer graphics math library written in portable Common Lisp with an emphasis on performance and clean code.

= Game Engines =
* [https://github.com/vydd/sketch Sketch] is a Common Lisp environment for the creation of electronic art, visual design, game prototyping, game making, computer graphics, exploration of human-computer interaction and more. It is inspired by [https://processing.org/ Processing Language] and shares some of the API.
* [http://xelf.me/ Xelf] is a simple 2D game engine written in Common Lisp.
* [https://github.com/borodust/cl-bodge cl-bodge] is a 3D-oriented game engine with support for window management, 3D/2D rendering, physics, 3D audio, text rendering, GUI, assets management and many more features under unified interface.
* The goal of [[glaw]] is to provide a collection of basic functionalities to help developing games.
* [http://bitbucket.org/eeeickythump/cl-tcod/ CL-TCOD] library provides an interface (wrapper) between Common Lisp and the Doryen Library (libtcod).
* [https://bitbucket.org/elliottslaughter/blackthorn-engine blackthorn] [''STALLED'']
* [http://code.google.com/p/lisp-game-engine/ lisp-game-engine] [''STALLED'']
* [[Until It Dies]] [''STALLED'']

= Utilities =
* [https://git.axity.net/axion/crawler2 crawler2] is an experimental map generation library. The goal is to be able to procedurally generate a map for use in a rogue-like, or other games.
* [https://github.com/lispgames/sdf sdf] - SDF glyph atlas generator.