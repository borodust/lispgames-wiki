[http://en.wikipedia.org/wiki/Common_Lisp Common Lisp] (a.k.a CL or just Lisp in most cases) has a sizable community and great library support for things like SDL, OpenGL, TrueType fonts, assets handling, etc. So it makes a good option for Lisp game development. Some resources for learning can be found on [[Learning Common Lisp]] page.

Being a standardized language, it has several implementations. Popular choice for open source CL implementation is [http://sbcl.org/ SBCL]. But there are [https://en.wikipedia.org/wiki/Category:Common_Lisp_implementations many more implementations] with their own perks and quirks.

== Graphics ==

=== APIs ===
* [[Cl-opengl]] If your writing games in common lisp you are almost certainly going to be using OpenGL. This wrapper enables Common Lisp to access almost every feature of OpenGL.
* [https://github.com/Lovesan/LDX LDX] is an attempt to bring DirectX into Common Lisp. (It does not look complete or activly maintained)
* [[Lispbuilder-SDL]] provides a set of bindings and Lispy abstractions for graphics, sound, input and other features
* [[PAL]] (Pixel Art Library) is a portable Common Lisp graphics and sound library for 2D games
* [[glop]] provides simple OpenGL window and context manipulation code as well as system input handling
* [[cl-glfw]] is an open source, multi-platform library for opening a window, creating an OpenGL context and managing input.

=== Graphics Engines ===
* [https://github.com/BradWBeer/CLinch CLinch] is a shader based graphics engine using CL-OpenGL. It has strong vector graphics support. It also has [https://github.com/BradWBeer/CLinch/wiki/CLinch-Tutorials tutorials].
* [http://github.com/anwyn/cl-horde3d CL-Horde3d] is a wrapper around the open source graphics [http://horde3d.org/home.html Horde3d]
* [[okra]] is a wrapper around the open source graphics engine [http://ogre3d.org OGRE]

== Assets ==
* [[cl-devil]] provides bindings to the DevIL image loading and manipulation library
* [[imago]] is an image manipulation library for Common Lisp
* [http://cliki.net/cl-cairo2 cl-cairo2] is a graphics library that provides Common Lisp bindings for the [http://cairographics.org/ Cairo API].
* [http://www.cliki.net/CLX CLX] provides an implementation of the X Window System protocol to Lisp graphics library[ies] and applications.
* [http://github.com/cbaggers/cl-soil cl-soil] is a work-in-progress wrapper around the [http://www.lonesock.net/soil.html SOIL] library

== Input Handling ==
Some of these are a repeat from the graphics sections as libraries like SDL have many features
* [[Lispbuilder-SDL]] provides a set of bindings and Lispy abstractions for graphics, sound, input and other features
* [[glop]] provides simple OpenGL window and context manipulation code as well as system input handling
* [[cl-glfw]] is an open source, multi-platform library for opening a window, creating an OpenGL context and managing input.

== Audio == 
* [[Lispbuilder-SDL]]
* [[cl-openal]]
* [http://thirdcog.eu/apps/cfxr cfxr]

== Physics == 
* [[SquirL]] (2d)
* [https://github.com/aerique/buclet buclet] (3d)
* [[cl-ode]] (3D/2D)

== Game Engine Architecture == 

=== Game Engines Written in Lisp ===
* [[Blocky]]
* [http://code.google.com/p/blackthorn-engine/ blackthorn]
* [http://code.google.com/p/lisp-game-engine/ lisp-game-engine]
* [http://bitbucket.org/eeeickythump/cl-tcod/ CL-TCOD]
* [[Until It Dies]]
* [[glaw]]
* [http://github.com/shr/pltcod PLTCOD]


=== Various ===
* [https://github.com/vydd/sketch Sketch] is a Common Lisp environment for the creation of electronic art, visual design, game prototyping, game making, computer graphics, exploration of human-computer interaction and more. It is inspired by [https://processing.org/ Processing Language] and shares some of the API.
* [https://git.axity.net/axion/crawler2 crawler2] is an experimental map generation library. The goal is to be able to procedurally generate a map for use in a rogue-like, or other games.